git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/RajatMahajan83/Simplilearn.git
git push -u origin master


To check for GitHub Repo connection:

git remote -v


To check for current folder

git status


For creating branch:

git checkout -b branchname
git add .
git commit -m "some message"
git push -u origin branchname



FrontEnd:

HTML, CSS, Angular, React, Vue

BackEnd:

Java, Node.js, Ruby, Python


Databases:

MySql, Oracle, MongoDB





JRE Vs JDK

Java Runtime Environment - To run Java Apps
Java Development Kit  -  Provides Tool required to create Java App
  


To run java from command line:

Copy this C:\Program Files\Java\jdk-14\bin

To set up the path:

Go to Control Panel > System and Security > System > Advanced System Settings > Click on Environment Variable > Click New for System Variables > Give name and path (C:\Program Files\Java\jdk-14\bin).




To check Java installed or not for Windows:

java -version in command line




IDE - Integrated Development Environment

We will be using Intellij IDE by Jet Brains ( Intellij supports Java SE and Android)



Public - This particular class accessible anywhere
Static - we can call this method directly without creating object
Void   - return type
Main   - Name of the class

//Three ways to Comment the code:
1) Line Comment using //
2) Block Comment using /*...*/
3) Javadoc Comment using /**...*/

Variable is a storage location used to store any set of data.
Variables can be of different types:

Primitive data types are those which are built in the language and there are 4 in Java
1) Integer
2) Floating Point
3) Character
4) Boolean


Integer is divided into 4 sections:

   Type   Size   Min. Value   Max. Value       format

1) Byte   8  bits   -128 	128               0
2) short  16 bits   -32768	32767		  0
3) int	  32 bits   -214783648	214783647	  0
4) long   64 bits				  0L	


Floating Point

float    32 bit  0.0f
double   64 bit	 0.0 or 0.0d

boolean pass = true;
boolean pass = false;




Arithmetic Operators


1) Basic Operators like + - / * %
2) Prefix and Postfix operators like ++ --
3) Compound assignment operators like += -+ /= *= %=


string + string = string
string + number = string
number + string = string
number + number = number



Smallervalue%Largervalue then the Modulus is Smallervalue

Prefix applies operation before returning value,
Postfix applies operation after returning value,


Prefix is increment by 1
Postfix is decrement by 1




Compound assignment operators

It is a combination of operation and assignment
Applies result of right side to left side and store that result in variable
on left side
 

Type conversion


There are two types of type conversions:

1) Implicit
2) Explicit


Relational Operators:

>,>=,==,<,<=,!=



Conditional Assignment:

It is kind of single line if else condition
if something happens we do this n if that doesnt happen we do that.

Example:

result = some condition. If condition is true then true part of the code executes else false part
of the code executes

result = 10 > 5  ?   10-1:10+1


Conditions:

If Else statement:

if (condition) 

 true-statement;

else 

false-statement;




If Else If Statement:

if (condition)

statement;

elseif (condition)

statement;

else (condition)

statement;



Nested If Condition:

if (test1>test2)
            if (test2>test3)
                System.out.println("test1 is greater. " + "value of test1 is " +test1);

            else

                System.out.println("test2 is greater. " + "value of test2 is " +test2);

else
    System.out.println("test3 is greater. " + "value of test3 is " +test3);







Local Variables: Accesible only in the local scope

Global Variables: Accessible globally.

Example of Local and Global Variables:


        int test1 = 20;
        int test2 = 25;
        int test3 = 35;
        String text2 = "I am outside the block";

        if (test1 < test2) {
            String text1 = "I am inside the block";
            System.out.println("test1 is smaller");
            System.out.println("text1>>> " + text1);

        } else {
            System.out.println("test2 is smaller");
        }

        //System.out.println("text1>>> " + text1);
        System.out.println("text2>>>> " + text2);





Logical Operators:

And         &                 
OR          |   
XOR         ^
Negation    !   

Example:

        int a = 20, b = 10, c = 5;

        if (a>b & b>c)
            System.out.println("a is greatest");


Conditional Logical Operators:

Conditional And   &&

Conditional Or    ||

&& - Only execute right-side if left side is true
|| - Only execute right-side if left side is false


Example:

you are admin && you have access = Allow if both true
you are admin || you have access = Allow if anyone true




Switch Case:


switch (condition) {
case out1:
execute
case out2:
execute
default:
execute
}




Looping:

1) While Loop
2) Do While Loop
3) For Loop





While Loop:

Repeatedly execute the statement as long as the condition is true.
Condition check at the loop start
Statement may never execute

   int a = 10;


        while (a>=1){
            System.out.println("Value of a = "+a);
            a--;

        }

Do While Loop:

Repeatedly execute the statement as long as the condition is true.
Condition check at the end
statement always executes atlease once



        int a = 10;

do{


    System.out.println("Value of a = "+a);
    a--;

}
        while (a>=1);





For Loop:


Repeatedly execute the statement as long as the condition is true.
Condition check at the loop start
Provide simplified notation for loop control value


        System.out.println("The output is ");


                for (int a = 10; a >=1 ; a--)
        {
            System.out.println(a);
        }




Array:

It is a collection of hetrogenous data types
Provide an ordered collection of elements.
Each element accessed via an index
index range from 0 to number of elements - 1
Number of elements can be found via array length

        float[] mymarks = new float[3];
        mymarks[0] = 10.0f;
        mymarks[1] = 20.0f;
mymarks[2] = 30.0f;

float sum = 0.0f;


        for ( int i=0; i < mymarks.length;i++)

            sum = sum + mymarks[i];
        System.out.println(sum);



For Each:

     int [] marks = {10,20,30,40};
        int total = 0;

        for (int initVal: marks) {

            total = total + initVal;
        }
        System.out.println(total);









Classes:


Jave is an object oriented language.
Object encapsulate data, operations and usage semantics
Class Allows storage and manipulation details details to be hiddenn.
Separate what is to be done from how it is done
Write a logic in one class and calling that logic in another.

Class is made up of both state and executable code.

- fields (parameters) = store object state. These are like variables.

- Methods = executable code that manipulate states and performs operations.

- Semantics are logics, declarations

- Constructors = executable code used during object creation to set initial state. First thing called inside the class.


flight is the name of the class
passengers and seats are fields
void add1Passenger() - This is the method
Flights () - This is the constructor

class flight{                ===== This is the class   
 
int passengers;
int seats;                    ====== passengers and seats are fields


Flight() {                  ================== This is the constructor

seats = 150;
passengers = 0;

}

void add1Passenger(){                   ====================== This is the method
 
 if (passengers < seats) {

passengers = passengers + 1;

} 

}


}

whenever someone calls a class, they will get the constructor and the method.




With new keyword we create instance or object of that class.


nyctoSf is the class name
nyctoSf is the object of the Flight class
slcToDallas is the class name
slcToDallas is the object of the class


Flight nyctoSf;

nycSf = new Flight ();          ============ This is the object of the class



Flight slcToDallas;

slcToDallas = new Flight;

both the object of class will get seats = 150 and passengers = 0



slcToDallas.add1Passenger();           ===== This is how we call the method of the class

The moment I call on the class, the slcToDallas will have 150 seats and 1 passenger while nyctoSf will have the 150 seats and 0 passenger since the class hasn't been called.




Basic Access Modifier:

These are used for putting restrictions

1) Public Access Modifiers = Everywhere
2) Private Access Modifies = Only within the own class


All those things which you want to use outside the class make them public and which we don't want to use outside the class make them private.



public class flight{                
 
private int passengers;
private int seats;                 


public Flight() {

seats = 150;
passengers = 0;

}

public void add1Passenger(){  
 
 if (passengers < seats) {

passengers = passengers + 1;
} 

else{
handleToMany()
}

}


private void handleToMany(){  
  System.out.println("Too many passengers")
}

}



